REACT_APP_FMP_API_KEY=f04ddc95561236e9dccd1ffa355ad55b
REACT_APP_BASEURL=https://localhost:3000
REACT_APP_BASE=https://localhost:3000


# CREATE TABLE Referrals (
#    ReferralId INT PRIMARY KEY IDENTITY(1,1),
#    ReferralCode VARCHAR(10) NOT NULL,
#    ReferredUserId INT NOT NULL,
#    ReferrerUserId INT NOT NULL,
#    ReferralDate DATETIME NOT NULL,
#    CommissionAmount DECIMAL(18,2) NOT NULL
# );

# [HttpPost("referral")]
# public IActionResult GenerateReferralLink([FromBody] GenerateReferralLinkRequest request)
# {
#    // Find the user by email
#    var user = _context.Users.SingleOrDefault(u => u.Email == request.Email);

#    // Generate a unique referral code for the user
#    var referralCode = GenerateReferralCode();

#    // Save the referral code to the user's record
#    user.ReferralCode = referralCode;
#    _context.SaveChanges();

#    // Return the referral link
#    var referralLink = $"http://localhost:3000/referral?code={referralCode}";
#    return Ok(referralLink);
# }

# private string GenerateReferralCode()
# {
#    // Generate a random string of 10 characters
#    const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
#    var random = new Random();
#    var referralCode = new string(Enumerable.Repeat(chars, 10)
#       .Select(s => s[random.Next(s.Length)]).ToArray());

#    return referralCode;
# }


# [HttpPost("commission")]
# public IActionResult CalculateCommission([FromBody] CommissionRequest request)
# {
#    // Find the referrer and referred users by referral code
#    var referrer = _context.Users.SingleOrDefault(u => u.ReferralCode == request.ReferralCode);
#    var referredUser = _context.Users.SingleOrDefault(u => u.UserId == request.ReferredUserId);

#    // Calculate the commission amount
#    var commissionAmount = request.PurchaseAmount * 0.1m;

#    // Save the commission to the referral record
#    var referral = new Referral {
#       ReferralCode = request.ReferralCode,
#       ReferredUserId = request.ReferredUserId,
#       ReferrerUserId = referrer.UserId,
#       ReferralDate = DateTime.Now,
#       CommissionAmount = commissionAmount
#    };
#    _context.Referrals.Add(referral);
#    _context.SaveChanges();

#    // Update the referrer's balance
#    _context.SaveChanges();

#    // Return the commission amount
#    return Ok(commissionAmount);
# }


# [HttpPost("withdraw")]
# public IActionResult Withdraw([FromBody] WithdrawRequest request)
# {
#    // Find the user by email
#    var user = _context.Users.SingleOrDefault(u => u.Email == request.Email);

#    // Check if the user has enough balance to withdraw
#    if (user.Balance < request.Amount)
#    {
#       return BadRequest("Insufficient balance.");
#    }

#    // Calculate the withdrawal amount and commission amount
#    var withdrawalAmount = request.Amount;
#    var commissionAmount = 0m;
#    if (!string.IsNullOrEmpty(request.ReferralCode))
#    {
#       commissionAmount = withdrawalAmount * 0.05m;
#       withdrawalAmount -= commissionAmount;
      
#       // Find the referrer user by referral code
#       var referrer = _context.Users.SingleOrDefault(u => u.ReferralCode == request.ReferralCode);
      
#       // Save the referral commission to the database
#       var referral = new Referral {
#          ReferralCode = request.ReferralCode,
#          ReferredUserId = user.UserId,
#          ReferrerUserId = referrer.UserId,
#          ReferralDate = DateTime.Now,
#          CommissionAmount = commissionAmount
#       };
#       _context.Referrals.Add(referral);
#    }

#    // Update the user's balance
#    user.Balance -= request.Amount;
#    _context.SaveChanges();

#    // Return the withdrawal and commission amounts
#    var response = new WithdrawResponse {
#       WithdrawalAmount = withdrawalAmount,
#       CommissionAmount = commissionAmount
#    };
#    return Ok(response);
# }